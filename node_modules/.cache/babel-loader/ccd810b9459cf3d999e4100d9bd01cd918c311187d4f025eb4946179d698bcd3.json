{"ast":null,"code":"var _jsxFileName = \"/Users/lazynoob/Documents/Git/test_repo/App/src/components/Timer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Timer = ({\n  task,\n  isRunning,\n  onComplete\n}) => {\n  _s();\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [isBreak, setIsBreak] = useState(false);\n  useEffect(() => {\n    if (isRunning) {\n      setTimeLeft(task.steps[0].duration);\n    }\n  }, [isRunning, task]);\n  useEffect(() => {\n    let timer;\n    if (isRunning && timeLeft > 0) {\n      timer = setInterval(() => {\n        setTimeLeft(prev => prev - 1);\n        announceTime(timeLeft - 1);\n      }, 1000);\n    } else if (timeLeft === 0) {\n      if (isBreak) {\n        // Break is over, move to next step\n        const nextStepIndex = currentStepIndex + 1;\n        if (nextStepIndex < task.steps.length) {\n          setCurrentStepIndex(nextStepIndex);\n          setTimeLeft(task.steps[nextStepIndex].duration);\n          setIsBreak(false);\n          announce(`Starting ${task.steps[nextStepIndex].name}`);\n        } else {\n          onComplete();\n          announce(\"Practice complete!\");\n        }\n      } else {\n        // Step is complete, start break if there is one\n        const currentStep = task.steps[currentStepIndex];\n        if (currentStep.breakDuration > 0) {\n          setTimeLeft(currentStep.breakDuration);\n          setIsBreak(true);\n          announce(\"Break time\");\n        } else {\n          // No break, move to next step\n          const nextStepIndex = currentStepIndex + 1;\n          if (nextStepIndex < task.steps.length) {\n            setCurrentStepIndex(nextStepIndex);\n            setTimeLeft(task.steps[nextStepIndex].duration);\n            announce(`Starting ${task.steps[nextStepIndex].name}`);\n          } else {\n            onComplete();\n            announce(\"Practice complete!\");\n          }\n        }\n      }\n    }\n    return () => {\n      if (timer) {\n        clearInterval(timer);\n      }\n    };\n  }, [isRunning, timeLeft, currentStepIndex, isBreak, task, onComplete]);\n  const announce = message => {\n    // Use the Web Speech API for announcements\n    const utterance = new SpeechSynthesisUtterance(message);\n    window.speechSynthesis.speak(utterance);\n  };\n  const announceTime = time => {\n    // Announce remaining time at specific intervals\n    if (time <= 3 && time > 0) {\n      announce(time.toString());\n    }\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n  const currentStep = task.steps[currentStepIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: task.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-step\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: isBreak ? \"Break\" : currentStep.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-display\",\n        children: formatTime(timeLeft)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: [\"Step \", currentStepIndex + 1, \" of \", task.steps.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(Timer, \"pSikrKrmSbZVvOOcPcG5a4yx50s=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Timer","task","isRunning","onComplete","_s","currentStepIndex","setCurrentStepIndex","timeLeft","setTimeLeft","isBreak","setIsBreak","steps","duration","timer","setInterval","prev","announceTime","nextStepIndex","length","announce","name","currentStep","breakDuration","clearInterval","message","utterance","SpeechSynthesisUtterance","window","speechSynthesis","speak","time","toString","formatTime","seconds","mins","Math","floor","secs","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lazynoob/Documents/Git/test_repo/App/src/components/Timer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface Step {\n  name: string;\n  duration: number;\n  breakDuration: number;\n}\n\ninterface Task {\n  id: number;\n  name: string;\n  steps: Step[];\n}\n\ninterface TimerProps {\n  task: Task;\n  isRunning: boolean;\n  onComplete: () => void;\n}\n\nconst Timer: React.FC<TimerProps> = ({ task, isRunning, onComplete }) => {\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [isBreak, setIsBreak] = useState(false);\n\n  useEffect(() => {\n    if (isRunning) {\n      setTimeLeft(task.steps[0].duration);\n    }\n  }, [isRunning, task]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n\n    if (isRunning && timeLeft > 0) {\n      timer = setInterval(() => {\n        setTimeLeft((prev) => prev - 1);\n        announceTime(timeLeft - 1);\n      }, 1000);\n    } else if (timeLeft === 0) {\n      if (isBreak) {\n        // Break is over, move to next step\n        const nextStepIndex = currentStepIndex + 1;\n        if (nextStepIndex < task.steps.length) {\n          setCurrentStepIndex(nextStepIndex);\n          setTimeLeft(task.steps[nextStepIndex].duration);\n          setIsBreak(false);\n          announce(`Starting ${task.steps[nextStepIndex].name}`);\n        } else {\n          onComplete();\n          announce(\"Practice complete!\");\n        }\n      } else {\n        // Step is complete, start break if there is one\n        const currentStep = task.steps[currentStepIndex];\n        if (currentStep.breakDuration > 0) {\n          setTimeLeft(currentStep.breakDuration);\n          setIsBreak(true);\n          announce(\"Break time\");\n        } else {\n          // No break, move to next step\n          const nextStepIndex = currentStepIndex + 1;\n          if (nextStepIndex < task.steps.length) {\n            setCurrentStepIndex(nextStepIndex);\n            setTimeLeft(task.steps[nextStepIndex].duration);\n            announce(`Starting ${task.steps[nextStepIndex].name}`);\n          } else {\n            onComplete();\n            announce(\"Practice complete!\");\n          }\n        }\n      }\n    }\n\n    return () => {\n      if (timer) {\n        clearInterval(timer);\n      }\n    };\n  }, [isRunning, timeLeft, currentStepIndex, isBreak, task, onComplete]);\n\n  const announce = (message: string) => {\n    // Use the Web Speech API for announcements\n    const utterance = new SpeechSynthesisUtterance(message);\n    window.speechSynthesis.speak(utterance);\n  };\n\n  const announceTime = (time: number) => {\n    // Announce remaining time at specific intervals\n    if (time <= 3 && time > 0) {\n      announce(time.toString());\n    }\n  };\n\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const currentStep = task.steps[currentStepIndex];\n\n  return (\n    <div className=\"timer\">\n      <h3>{task.name}</h3>\n      <div className=\"current-step\">\n        <h4>{isBreak ? \"Break\" : currentStep.name}</h4>\n        <div className=\"time-display\">\n          {formatTime(timeLeft)}\n        </div>\n        <div className=\"progress\">\n          Step {currentStepIndex + 1} of {task.steps.length}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Timer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}